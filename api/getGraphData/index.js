require("isomorphic-fetch");
const teamsfx = require("@microsoft/teamsfx");

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - OnBehalfOfUserCredential() - Construct credential with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - createMicrosoftGraphClient() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} { [key: string]: any; } - The context generated by teamsfx binding.
 */
module.exports = async function (context, req, teamsfxContext) {
  context.log("HTTP trigger function processed a request.");

  // Initialize response.
  const res = {
    status: 200,
    body: {},
  };

  // Put an echo into response body.
  res.body.receivedHTTPRequestBody = req.body || "";


  // Set default configuration for teamsfx SDK.
  try {
    teamsfx.loadConfiguration();
  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error: "Failed to load app configuration.",
      },
    };
  }

  // Prepare access token.
  const accessToken = teamsfxContext["AccessToken"];
  if (!accessToken) {
    return {
      status: 400,
      body: {
        error: "No access token was found in request header.",
      },
    };
  }



  // Construct credential.
  let credential;
  const method = req.method.toLowerCase();
  const credentialType = method != "get" ? req.body && req.body.credentialType : req.query.credentialType;
  try {
    if (!credentialType) {
      return {
        status: 500,
        body: {
          error: "Specify the type of credential in the body using field credentialType.",
        },
      };
    }

    switch (credentialType) {
      case ("user"):
        credential = new teamsfx.OnBehalfOfUserCredential(accessToken);
        break;
      case ("app"):
        credential = new teamsfx.M365TenantCredential();
        break;
    }

  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error:
          "Failed to obtain on-behalf-of credential using your accessToken. " +
          "Ensure your function app is configured with the right Azure AD App registration.",
      },
    };
  }

  // Create a graph client to access user's Microsoft 365 data after user has consented.
  try {
    const graphClient = teamsfx.createMicrosoftGraphClient(credential);
    graphClient.config.defaultVersion = 'beta';
    let path = "";
    let result = undefined;

    switch (method) {
      case "get":
        path = req.query.path;
        result = await graphClient.api(path).get(req.query.path)
        break;
      case "put":
        break;
      case "patch":
        path = req.body.path;
        result = await graphClient.api(path)
          .header('Content-Type', 'application/json')
          .patch(req.body.data);
        break;
      case "post":
        path = req.body.path;
        result = await graphClient.api(path)
          .header('Content-Type', 'application/json')
          .post(req.body.data);
        break;
      case "delete":
        path = req.body.path;
        result = await graphClient.api(path)
          .header('Content-Type', 'application/json')
          .delete();
        break;
    }

    res.body.graphClientMessage = result;

  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error:
          "Failed to retrieve data from Microsoft Graph. The application may not be authorized.",
      },
    };
  }

  return res;
};
